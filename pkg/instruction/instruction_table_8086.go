package instruction

type InstructionTable struct {
	Encodings               []InstructionEncoding
	EncodingCount           int
	MaxInstructionByteCount int
}

var InstructionTable8086 = []InstructionEncoding{
	// MOV
	{Op_mov, []InstructionBits{
		{Bits_Literal, 6, 0, 0b100010},
		{Usage: Bits_D, BitCount: 1},
		{Usage: Bits_W, BitCount: 1},
		{Usage: Bits_MOD, BitCount: 2},
		{Usage: Bits_REG, BitCount: 3},
		{Usage: Bits_RM, BitCount: 3},
	}},
	{Op_mov, []InstructionBits{
		{Bits_Literal, 7, 0, 0b1100011},
		{Usage: Bits_W, BitCount: 1},
		{Usage: Bits_MOD, BitCount: 2},
		{Bits_Literal, 3, 0, 0b000},
		{Usage: Bits_RM, BitCount: 3},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
		{Bits_D, 0, 0, 0},
	}},
	{
		Op_mov, []InstructionBits{
			{Bits_Literal, 4, 0, 0b1011},
			{Usage: Bits_W, BitCount: 1},
			{Usage: Bits_REG, BitCount: 3},
			{Bits_Data, 0, 0, 0},
			{Bits_WMakesDataW, 0, 0, 1},
			{Bits_D, 0, 0, 1},
		},
	},
	{
		Op_mov, []InstructionBits{
			{Bits_Literal, 7, 0, 0b1010000},
			{Usage: Bits_W, BitCount: 1},
			{Bits_Disp, 0, 0, 0},
			{Bits_DispAlwaysW, 0, 0, 0b1},
			{Bits_REG, 0, 0, 0},
			{Bits_MOD, 0, 0, 0},
			{Bits_RM, 0, 0, 0b110},
			{Bits_D, 0, 0, 0b1},
		},
	},
	{
		Op_mov, []InstructionBits{
			{Bits_Literal, 7, 0, 0b1010001},
			{Bits_W, 1, 0, 0},
			{Bits_Disp, 0, 0, 0},
			{Bits_DispAlwaysW, 0, 0, 0b1},
			{Bits_REG, 0, 0, 0},
			{Bits_MOD, 0, 0, 0},
			{Bits_RM, 0, 0, 0b110},
			{Bits_D, 0, 0, 0b0},
		},
	},
	{
		Op_mov, []InstructionBits{
			{Bits_Literal, 6, 0, 0b100011},
			{Bits_D, 1, 0, 0},
			{Bits_Literal, 1, 0, 0b0},
			{Bits_MOD, 0, 0, 0},
			{Bits_Literal, 1, 0, 0b0},
			{Bits_SR, 2, 0, 0},
			{Bits_W, 0, 0, 0b1},
		},
	},

	// PUSH
	{Op_push, []InstructionBits{
		{Bits_Literal, 8, 0, 0b11111111},
		{Bits_MOD, 3, 0, 0},
		{Bits_Literal, 3, 0, 0b0},
		{Bits_RM, 3, 0, 0},
		{Bits_W, 0, 0, 1},
		{Bits_D, 0, 0, 1},
	}},
	{Op_push, []InstructionBits{
		{Bits_Literal, 5, 0, 0b01010},
		{Bits_REG, 3, 0, 0},
		{Bits_W, 0, 0, 1},
		{Bits_D, 0, 0, 1},
	}},
	{Op_push, []InstructionBits{
		{Bits_Literal, 3, 0, 0b000},
		{Bits_SR, 2, 0, 0},
		{Bits_Literal, 3, 0, 0b110},
		{Bits_W, 0, 0, 1},
		{Bits_D, 0, 0, 1},
	}},

	// ADD
	{Op_add, []InstructionBits{
		{Bits_Literal, 6, 0, 0b000000},
		{Bits_D, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_REG, 3, 0, 0},
		{Bits_RM, 3, 0, 0},
	}},
	{Op_add, []InstructionBits{
		{Bits_Literal, 6, 0, 0b100000},
		{Bits_S, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_Literal, 3, 0, 0b000},
		{Bits_RM, 3, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
	}},
	{Op_add, []InstructionBits{
		{Bits_Literal, 7, 0, 0b0000010},
		{Bits_W, 1, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
		{Bits_REG, 0, 0, 0b0},
		{Bits_D, 0, 0, 1},
	}},

	// SUB
	{Op_sub, []InstructionBits{
		{Bits_Literal, 6, 0, 0b001010},
		{Bits_D, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_REG, 3, 0, 0},
		{Bits_RM, 3, 0, 0},
	}},
	{Op_sub, []InstructionBits{
		{Bits_Literal, 6, 0, 0b100000},
		{Bits_S, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_Literal, 3, 0, 0b101},
		{Bits_RM, 3, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
	}},
	{Op_sub, []InstructionBits{
		{Bits_Literal, 7, 0, 0b0010110},
		{Bits_W, 1, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
		{Bits_REG, 0, 0, 0b0},
		{Bits_D, 0, 0, 1},
	}},

	// CMP
	{Op_sub, []InstructionBits{
		{Bits_Literal, 6, 0, 0b001110},
		{Bits_D, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_REG, 3, 0, 0},
		{Bits_RM, 3, 0, 0},
	}},
	{Op_sub, []InstructionBits{
		{Bits_Literal, 6, 0, 0b100000},
		{Bits_S, 1, 0, 0},
		{Bits_W, 1, 0, 0},
		{Bits_MOD, 2, 0, 0},
		{Bits_Literal, 3, 0, 0b101},
		{Bits_RM, 3, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
	}},
	{Op_sub, []InstructionBits{
		{Bits_Literal, 7, 0, 0b0011110},
		{Bits_W, 1, 0, 0},
		{Bits_Data, 0, 0, 0},
		{Bits_WMakesDataW, 0, 0, 1},
		{Bits_REG, 0, 0, 0b0},
		{Bits_D, 0, 0, 1},
	}},

	// Jumps
	{Op_je, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01110100},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jl, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111100},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jle, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111110},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jb, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01110010},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jo, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01110000},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_js, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111000},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jne, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01110101},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jnl, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111101},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jg, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111111},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jnp, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111011},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jno, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01110001},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jns, []InstructionBits{
		{Bits_Literal, 8, 0, 0b01111001},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_loop, []InstructionBits{
		{Bits_Literal, 8, 0, 0b11100010},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_loopz, []InstructionBits{
		{Bits_Literal, 8, 0, 0b11100001},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_loopnz, []InstructionBits{
		{Bits_Literal, 8, 0, 0b11100000},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},
	{Op_jcxz, []InstructionBits{
		{Bits_Literal, 8, 0, 0b11100011},
		{Bits_Disp, 0, 0, 0},
		{Bits_RelJMPDisp, 0, 0, 1},
	}},

	/*
		{Op_pop, []InstructionBits{}},
		{Op_xchg, []InstructionBits{}},
		{Op_in, []InstructionBits{}},
		{Op_out, []InstructionBits{}},
		{Op_xlat, []InstructionBits{}},
		{Op_lea, []InstructionBits{}},
		{Op_lds, []InstructionBits{}},
		{Op_les, []InstructionBits{}},
		{Op_lahf, []InstructionBits{}},
		{Op_sahf, []InstructionBits{}},
		{Op_pushf, []InstructionBits{}},
		{Op_popf, []InstructionBits{}},
		{Op_add, []InstructionBits{}},
		{Op_adc, []InstructionBits{}},
		{Op_sub, []InstructionBits{}},
		{Op_inc, []InstructionBits{}},
		{Op_sbb, []InstructionBits{}},
		{Op_aaa, []InstructionBits{}},
		{Op_daa, []InstructionBits{}},
		{Op_dec, []InstructionBits{}},
		{Op_neg, []InstructionBits{}},
		{Op_cmp, []InstructionBits{}},
		{Op_aas, []InstructionBits{}},
		{Op_das, []InstructionBits{}},
		{Op_mul, []InstructionBits{}},
		{Op_imul, []InstructionBits{}},
		{Op_aam, []InstructionBits{}},
		{Op_div, []InstructionBits{}},
		{Op_idiv, []InstructionBits{}},
		{Op_aad, []InstructionBits{}},
		{Op_cbw, []InstructionBits{}},
		{Op_cwd, []InstructionBits{}},

		{Op_not, []InstructionBits{}},
		{Op_shl, []InstructionBits{}},
		{Op_shr, []InstructionBits{}},
		{Op_sar, []InstructionBits{}},
		{Op_rol, []InstructionBits{}},
		{Op_ror, []InstructionBits{}},
		{Op_rcl, []InstructionBits{}},
		{Op_rcr, []InstructionBits{}},
		{Op_and, []InstructionBits{}},
		{Op_test, []InstructionBits{}},
		{Op_or, []InstructionBits{}},
		{Op_xor, []InstructionBits{}},
		{Op_rep, []InstructionBits{}},
		{Op_movs, []InstructionBits{}},
		{Op_cmps, []InstructionBits{}},
		{Op_scas, []InstructionBits{}},
		{Op_lods, []InstructionBits{}},
		{Op_stos, []InstructionBits{}},
		{Op_call, []InstructionBits{}},
		{Op_jmp, []InstructionBits{}},
		{Op_ret, []InstructionBits{}},
		{Op_je, []InstructionBits{}},
		{Op_jl, []InstructionBits{}},
		{Op_jle, []InstructionBits{}},
		{Op_jb, []InstructionBits{}},
		{Op_jbe, []InstructionBits{}},
		{Op_jp, []InstructionBits{}},
		{Op_js, []InstructionBits{}},
		{Op_jne, []InstructionBits{}},
		{Op_jnl, []InstructionBits{}},
		{Op_jg, []InstructionBits{}},
		{Op_jnb, []InstructionBits{}},
		{Op_ja, []InstructionBits{}},
		{Op_jnp, []InstructionBits{}},
		{Op_jno, []InstructionBits{}},
		{Op_jns, []InstructionBits{}},
		{Op_loop, []InstructionBits{}},
		{Op_loopz, []InstructionBits{}},
		{Op_loopnz, []InstructionBits{}},
		{Op_jcxz, []InstructionBits{}},
		{Op_int, []InstructionBits{}},
		{Op_int3, []InstructionBits{}},
		{Op_into, []InstructionBits{}},
		{Op_iret, []InstructionBits{}},
		{Op_clc, []InstructionBits{}},
		{Op_cmc, []InstructionBits{}},
		{Op_stc, []InstructionBits{}},
		{Op_cld, []InstructionBits{}},
		{Op_std, []InstructionBits{}},
		{Op_cli, []InstructionBits{}},
		{Op_sti, []InstructionBits{}},
		{Op_hlt, []InstructionBits{}},
		{Op_wait, []InstructionBits{}},
		{Op_esc, []InstructionBits{}},
		{Op_lock, []InstructionBits{}},
		{Op_segment, []InstructionBits{}},*/
}
